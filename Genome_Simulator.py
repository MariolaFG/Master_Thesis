#!/usr/bin/env python
""" This pipeline simulates a poliploid genome, generates reads from each \
haploid and maps them to the reference genome.
Usage: python Genome_Simulator.py reference_genome ploidy_level \
Number_of_Organisms"""

from __future__ import division
from sys import argv
import subprocess
import random

def indexer(genome):
	"""Creates genome index"""
    
	cmd = 'samtools faidx %s' % (genome)
	e = subprocess.check_call(cmd, shell=True)

def simulator_ploidy(genom, ploidy, organisms):
    """ Calls haplogenerator.py and allowraper to simulate the genome.
    
    genom: fasta file containing the reference genome
    ploidy: int number that represents the ploidy level
    organisms: int number that represents the number of organisms"""

    genomes = open(genom)
    genome = ""
    for line in genomes:
        if not line.startswith(">"):
            genome = genome + line.strip()
    print "Genome length: " + str(len(genome))
    
    i = 1
    snps = []
    command = ""
    
    while i < (int(ploidy)/2)+1:
        a = int(int(len(genome))/((int(ploidy)/2)*100))
        # This number represents 1% of the genome
        b = 3 * a
        # This number represents 3% of the genome
        number_homo = random.randint(a, b)
        # Number of homeologous SNPs
        print "Number homeologous SNPs: " + str(number_homo)
                
        pos = range(int(len(genome)))
        snps2 = random.sample(pos, number_homo)
        # It selects several positions in the genome to mutate that position
        # and generate a homeologous SNP 
        snps2 = sorted(snps2)
        snps.append(snps2)
        i = i + 1

    i = 1
    while i < (int(organisms)) + 1:
        o = 1
        org_val = int(organisms)/2
        number_hete = random.randint(5, 7)
        s1 = "-s " "\"[" + str(number_hete) + ",0,0]\""
        s2 = "-s " "\"[" + str(random.randint(5, 7)) + ",0,0]\""
        s_o2 = [s1, "", "", s2]
        # s1 and s2 are the parameters included in HaploGenerator to simulate
        # a homeologous SNP
        while o < (int(ploidy)/2) + 1:
            number_true = random.randint(int(int(len(genome))*0.2/(400*org_val)),\
                          int(int(len(genome))*0.8/(int(ploidy)/2*100*org_val)))
            snps_true = random.sample(pos, number_true)
            # This is a list of positions containing the location of the homozygous
            # allelic SNPs
            snps_true = sorted(snps_true)
            print "Number Homozygous SNPs: " + str(len(snps_true))
            s2 = s_o2[o-1]
            for element in snps_true:
                snps[o-1].append(element)
                snps3 = sorted(snps[o-1])
                m = "{'A':'T','G':'C','C':'A','T':'G'}"
                cmd = '../../haplogenerator.py -f Trial.fasta -o \
                Simulated_Genome/gen_%s_%s --model lognormal %s -S "%s" -m "%s"\
                -p 2' % (str(i), str(o), s2, str(snps3), m)
                # Runs HaploGenerator including homeologous SNPs, homozygous
                # allelic SNPs and heterozygous allelic SNPs
                print "cmd: " + cmd
                e = subprocess.check_call(cmd, shell=True)
                
            for cou in snps[o-1]:
                if cou in snps_true:
                    snps[o-1].remove(cou)
            # This loop erase homozygous allelic SNPs that have already been
            # simulated

            o = o + 1
        i = i + 1

        org = 1
        number = int(ploidy)/2

        while org < int(organisms)+1:
            i = 1
            inp = ""
            name = "Simulated_Genome/gen_" + str(org) + "_"
            while i < (number + 1):
                inp = inp + name + str(i) + " "
                i = i + 1

            cmd = '../allowrapper -p %s -f %s %s Simulated_Genome/genTotal%s'\
            % (ploidy, genom, inp, str(org))
            #Runs Allowrapper to combine HaploGenerator's output
            e = subprocess.check_call(cmd, shell=True)

            org = org + 1

        com_out.write(command)
        com_out.close()




def generator(p, organisms):
	"""Generates reads for each haploid
    
    p: int number that represents the ploidy level
    organisms: int number that represents the number of organisms"""

	o = 1
	while o < int(organisms) + 1:
		i = 1
		while i < (int(p)) + 1:
			inp = "Simulated_Genome/genTotal" + str(o) + "_hap" + str(i) + ".fa"
			outp = "Reads/output" + str(o) + "_" + str(i)

			cmd = '../art_bin_ChocolateCherryCake/art_illumina -na -i %s -l 100 -f 20 -ss HS20 -d %s_%s -o %s' % (inp, str(o), str(i), outp)
			e = subprocess.check_call(cmd, shell=True)
         # Reads are generated by ART 

			i = i + 1
		o = o + 1

def reads_merger(p, organisms):
    """ Merges the reads corresponding to the same organism
    
    p: int number that represents the ploidy level
    organisms: int number that represents the number of organisms"""

    o = 1
    while o < (int(organisms)) + 1:
		inp = ""
		i = 1
		while i < (int(p)) + 1:
			inp = inp + "Reads/output" + str(o) + "_" + str(i) + ".fq "
			i = i + 1

		outp = "Reads/merged" + str(o) + ".fq"
		cmd = 'cat %s > %s' % (inp, outp)
		# Reads corresponding to the same genotype are merged into one file
        	e = subprocess.check_call(cmd, shell=True)

		o = o + 1

def mapper(genome, organisms):
	"""Maps the reads to the reference genome using BWA
    
    genome: fasta file containing the reference genome
    organisms: int number that represents the number of organisms"""

	cmd = "bwa index %s" % (genome)
	e = subprocess.check_call(cmd, shell=True)

	o = 1
	while o < int(organisms) + 1:
		inp = "Reads/merged" + str(o) + ".fq "
		outp = "Alignment/merged" + str(o) + ".sam"
		cmd = 'bwa mem %s %s > %s' % (genome, inp, outp)
		e = subprocess.check_call(cmd, shell=True)
        
		o = o + 1


def bam_creator(organisms):
	"""Converts the sam files into a bam files
    
    organisms: int number that represents the number of organisms"""

	i = 1
	while i < int(organisms) + 1:
                inp = "Alignment/merged" + str(i) + ".sam"
		outp = "Alignment/merged" + str(i) + ".bam"
		cmd = 'samtools view -bS %s > %s' % (inp, outp)
		e = subprocess.check_call(cmd, shell=True)
		i = i + 1


def bam_sorter(organisms):
    """Sorts the bam files
    
    organisms: int number that represents the number of organisms"""

    i = 1
    while i < int(organisms) + 1:

		inp = "Alignment/merged" + str(i) + ".bam"
		outp = "Alignment/sorted_merged" + str(i) + ".bam"

		cmd = 'samtools sort %s > %s' % (inp, outp)
		e = subprocess.check_call(cmd, shell=True)

		cmd = "samtools index %s" % (outp)
		e = subprocess.check_call(cmd, shell=True)

		i = i + 1

if __name__ == "__main__":

    indexer(argv[1])
    simulator_ploidy(argv[1], argv[2], argv[3])
    generator(argv[2], argv[3])
    reads_merger(argv[2], argv[3])
    mapper(argv[1],argv[3])
    bam_creator(argv[3])
    bam_sorter(argv[3])

		
